
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/bd076826-e549-49f6-9c9e-620f0bde1208 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float moisture_val;
  float moisture_val2;
  float room_temperature;
  int mapped_level;
  int moisture_percent;
  int moisture_percent2;
  int room_humidity;
  int threshold_level;
  int water_level;
  int waterpump_count;
  bool pump_status;
  bool wl_warning;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// DHT sensor library for ESPx - Version: Latest 
#include <DHTesp.h>

const int WetVal = 1040;
const int DryVal = 3040;

const int WetVal2 = 240;
const int DryVal2 = 509;

const int MaxLvl = 570;
const int MinLvl = 16;


#define MOISTURE1 34
#define MOISTURE2 39
#define PUMP_RELAY 25
#define DHT11_IN 26
#define WATERLEVEL 4



DHTesp DHT;

// Pump Status Text
String pump_status_message = "OFF";

// Variable for pump trigger
int pump_threshold = 30;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if nothing is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Set ADC to use 12 bits
  //analogReadResolution(12);

  // Set Relay as Output
  pinMode(PUMP_RELAY, OUTPUT);

  // Turn off relay
  digitalWrite(PUMP_RELAY, HIGH);

  // Set Pump Status to Off
  pump_status = 0;
  
  //Set water level warning to be LOW
  wl_warning = 0;
  
  //Setup of DHT sensor
  DHT.setup(DHT11_IN, DHTesp::DHT11);
}

void loop() {
  ArduinoCloud.update();
  // Cloud updates everytime the main code is looped

  //Code for measuring Moisture from sensor in plant 1 which will be irrigated basec on moisture
  moisture_val = analogRead(MOISTURE1);
  //map moisture value to a percentage using the max and min found in TEST 1
  moisture_percent = map(moisture_val, DryVal, WetVal, 0, 100);
  //constrain command in case it goes above or below max and min found in calibration
  moisture_percent = constrain(moisture_percent, 0, 100);
  
  
  //Code for measuring Moisture from sensor in plant 2 which will be watered manually
  moisture_val2 = analogRead(MOISTURE2);
  //map moisture value to a percentage using the max and min found in TEST 1
  moisture_percent2 = map(moisture_val2, DryVal2, WetVal2, 0, 100);
  //constrain command in case it goes above or below max and min found in calibration
  moisture_percent2 = constrain(moisture_percent2, 0, 100);
  
  
  //Code for Water level sensor reading
  water_level = analogRead(WATERLEVEL);
  mapped_level = map(water_level, MinLvl, MaxLvl, 0, 100);
  mapped_level = constrain(mapped_level, 0, 100);
  
 
  //DHT11 code to read controlled variables of room temperature and humidity
  room_temperature = DHT.getTemperature();
  room_humidity = DHT.getHumidity();
  delay(500);


  /* if statement to irrigate based on moisture pump turns on if soil moisture below threshold, 
     the pump turns on for 5 seconds then checks again
  */
  if (moisture_percent <= pump_threshold) {
    /*digitalWrite(12, HIGH);
    pump_status = 1;
    delay(1000);
    digitalWrite(12, LOW);
    pump_status = 0;
    delay(9000);
    */
    pumpOn();
    delay(100);
  } else {
    /*digitalWrite(12, LOW);
    pump_status = 0;
    */
    pumpOff();
    delay(100);
  }
  
  
  /* if statement to count the amount of times the water pump is turned on and to keep it the
     the same if off to measure amount of water used 
  */
  
  /*if (pump_status == 1) {
    waterpump_count = waterpump_count+1;
  } else {
    waterpump_count = waterpump_count;
  }
  */
  
  //Issue a warning if water level below 40%
    if (mapped_level <= 40) {
    wl_warning = 1;
  }
  
  //Printing of all variables to check in serial monitor it works
  Serial.print("Moisture Percent 1: ");
  Serial.println(moisture_percent);
  
  Serial.print("Moisture Percent 2: ");
  Serial.println(moisture_percent2);
  
  Serial.print("Pump Status: ");
  Serial.println(pump_status_message);
  
  Serial.print("Number of waterings: ");
  Serial.println(waterpump_count);
  
  Serial.print("Water level: ");
  Serial.println(mapped_level);
  
  
  Serial.print(" ");
  delay(100);

}


void pumpOn() {
  digitalWrite(PUMP_RELAY, HIGH);
  pump_status = 1;
  waterpump_count = waterpump_count+1;
  delay(1000);
  digitalWrite(PUMP_RELAY, LOW);
  pump_status = 0;
  delay(59000);
}

void pumpOff() {
  digitalWrite(PUMP_RELAY, LOW);
  pump_status = 0;
  delay(60000);
  
}



void onThresholdLevelChange() {
  pump_threshold = threshold_level;
}








